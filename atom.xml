<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mark blog</title>
  
  <subtitle>代码如诗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lishuiping.github.io/"/>
  <updated>2018-12-04T02:02:00.446Z</updated>
  <id>https://lishuiping.github.io/</id>
  
  <author>
    <name>Mark LI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>根据作者，统计出每个人代码量</title>
    <link href="https://lishuiping.github.io/2018/12/04/git-log-statistics/"/>
    <id>https://lishuiping.github.io/2018/12/04/git-log-statistics/</id>
    <published>2018-12-04T01:49:22.000Z</published>
    <updated>2018-12-04T02:02:00.446Z</updated>
    
    <content type="html"><![CDATA[<p>根据作者，统计11月份每个人的代码量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">'%aN'</span> | sort -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">"<span class="variable">$name</span>\t"</span>; git <span class="built_in">log</span> --since  ==2018-11-01 --until==2018-11-30 --author=<span class="string">"<span class="variable">$name</span>"</span> --pretty=tformat: --numstat | awk <span class="string">'&#123; add += $1; subs += $2; loc += $1 + $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>总统计，统计11月份每个人的代码量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --since ==2018-11-01 --until==2018-11-31 --author=<span class="string">"<span class="variable">$name</span>"</span> --pretty=tformat: --numstat | awk <span class="string">'&#123; add += $1; subs += $2; loc += $1 + $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;根据作者，统计11月份每个人的代码量。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cloc 代码量统计</title>
    <link href="https://lishuiping.github.io/2018/12/04/cloc/"/>
    <id>https://lishuiping.github.io/2018/12/04/cloc/</id>
    <published>2018-12-04T01:41:07.000Z</published>
    <updated>2018-12-04T02:25:12.969Z</updated>
    
    <content type="html"><![CDATA[<p>上文有一篇文章说到根据 git log 统计，统计出来的是每个人的代码量，现在有另外一种场景，需要统计出，每个月的总代码数（不是个人代码量）。如果是边开发边统计可能还要，开发工具上有很多都支持，但是对历史代码统计，git log好像行不通。</p><p>Cloc是一款使用Perl语言开发的开源代码统计工具，支持多平台使用、多语言识别，能够计算指定目标文件或文件夹中的文件数（files）、空白行数（blank）、注释行数（comment）和代码行数（code）。</p><p><strong>特点</strong></p><p>Cloc具备很多特性以致于让它更方便于使用、完善、拓展和便携。<br>1、作为一个单一的独立形式存在的文件，Cloc只需要下载相应文件并运行这样最少的安装工作即可。<br>2、能够从源码文件中识别编程语言注释定义；<br>3、允许通过语言和项目来分开统计计算；<br>4、能够以纯文本、SQL、XML、YAML、逗号分隔等多样化的格式生成统计结果；<br>5、能够统计诸如tar、Zip等格式的压缩文件中的代码数；<br>6、有许多排除式的指令；<br>7、能够使用空格或者不常用的字符处理文件名和目录名；<br>8、不需要依赖外部标准的Perl语言配置；<br>9、支持多平台使用。</p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cloc                    <span class="comment"># https://www.npmjs.com/package/cloc</span></span><br><span class="line">sudo apt-get install cloc              <span class="comment"># Debian, Ubuntu</span></span><br><span class="line">sudo yum install cloc                  <span class="comment"># Red Hat, Fedora</span></span><br><span class="line">sudo pacman -S cloc                    <span class="comment"># Arch</span></span><br><span class="line">sudo pkg install cloc                  <span class="comment"># FreeBSD</span></span><br><span class="line">sudo port install cloc  or  brew install cloc     <span class="comment"># Mac OS X with MacPorts</span></span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>第一步： 在git 上，在每个月底代码处 找到commit id拉取分支，将分支名称命名为 月份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 1 973ec7dca5b51bd93e63c0a9d3b7a05db341caa7</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">git checkout -b 12 commit id</span><br></pre></td></tr></table></figure><p>第二步： 分别切换到每个月的分支，使用cloc统计代码量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git checkout </span><br><span class="line">cloc project_demo</span><br><span class="line"></span><br><span class="line">cloc yht</span><br><span class="line">     538 text files.</span><br><span class="line">     523 unique files.                                          </span><br><span class="line">     387 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.70  T=1.92 s (78.5 files/s, 62020.1 lines/s)</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">JavaScript                     123           3738           2589          80813</span><br><span class="line">JSON                             4              0              0          22129</span><br><span class="line">SASS                            11             80            169           5713</span><br><span class="line">CSS                              8            433             43           3088</span><br><span class="line">HTML                             2             50             21            326</span><br><span class="line">Markdown                         1             13              0             65</span><br><span class="line">YAML                             1              0              0              5</span><br><span class="line">Bourne Shell                     1              0              1              5</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">SUM:                           151           4314           2823         112144</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>通过上面的方式，功能是能实现，但是非常耗时，不知道哪个大神说过：浪费时间，就是浪费生命。。。干我们这行，生命很短暂，所以为了小命，我们需要继续优化。</p><p>​    第一步，在每个月月末拉取分支这个没什么优化，暂时没有好的办法，需要人为的去判断取出commit id，当日，还有一种办法，通过git log提交的时间，取出每个月最后一条记录。不过花这个时间，我还不如一条条去找。</p><p>​       第二步，切换分支，使用cloc 统计，我们知道，分支名称是通过月份来命名的，是有规律递增。</p><p>改进：vi total.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((i=1;i&lt;=12;i++));  <span class="comment">#循环12个分支</span></span><br><span class="line"><span class="keyword">do</span>   </span><br><span class="line">git checkout <span class="variable">$i</span>  <span class="comment">#切换分支</span></span><br><span class="line">cloc ./<span class="comment">#统计</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>ok，这样我们省去了手动切换分支统计的时间。</p><p><strong>发现问题</strong></p><p>前端统计的时候，有些vue 结尾的 代码量好像没计算在内，查找原因发现：cloc  的JavaScript只包含了统计 es6 和js后缀。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cloc --show-lang=JavaScript</span><br><span class="line">JavaScript                 (es6, js)</span><br></pre></td></tr></table></figure><p>继续改进： cloc 支持这种语言，通过 –force-lang</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((i=1;i&lt;=12;i++));  </span><br><span class="line"><span class="keyword">do</span>   </span><br><span class="line">git checkout <span class="variable">$i</span></span><br><span class="line">cloc --force-lang=JavaScript,vue ./</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>这样，我们就讲vue 后缀的文件代码量统计到JavaScript 中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上文有一篇文章说到根据 git log 统计，统计出来的是每个人的代码量，现在有另外一种场景，需要统计出，每个月的总代码数（不是个人代码量）。如果是边开发边统计可能还要，开发工具上有很多都支持，但是对历史代码统计，git log好像行不通。&lt;/p&gt;
&lt;p&gt;Cloc是一款使用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hive 基本操作</title>
    <link href="https://lishuiping.github.io/2018/11/30/hive/"/>
    <id>https://lishuiping.github.io/2018/11/30/hive/</id>
    <published>2018-11-30T02:52:02.000Z</published>
    <updated>2018-11-30T06:13:12.425Z</updated>
    
    <content type="html"><![CDATA[<p>###配置</p><p>修改hive配置文件 , 我的配置文件位置在 /usr/local/Cellar/hive/2.3.1/libexec/conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/Cellar/hive/3.1.1/libexec/conf</span><br><span class="line">$ cp hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hive-site.xml</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;jdbc:mysql://localhost/metastore&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;hive(mysql中创建的用户名)&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;123456(mysql中创建的用户密码)&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/tmp/hive&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.querylog.location&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/tmp/hive&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.downloaded.resources.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/tmp/hive&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.server2.logging.operation.log.location&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/tmp/hive&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p> javax.jdo.option.ConnectionUserName – 连接mysql的账号<br> javax.jdo.option.ConnectionPassword – 连接mysql的秘密<br> javax.jdo.option.ConnectionURL – 对应上一步创建的数据库</p><p>启动会抛找不到Driver</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L <span class="string">'http://www.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.42.tar.gz/from/http://mysql.he.net/'</span> | tar xz</span><br><span class="line">$ cp mysql-connector-java-5.1.42/mysql-connector-java-5.1.42-bin.jar /usr/<span class="built_in">local</span>/Cellar/hive/2.1.1/libexec/lib/</span><br></pre></td></tr></table></figure><p>hive 初始化 mysql 中的数据库hive</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$HIVE_HOME/bin/schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span> (<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span>,age <span class="built_in">int</span>, tel <span class="keyword">string</span>) <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\t'</span> <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure><p>数据导入</p><p>本地导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="built_in">local</span> inpath <span class="string">'file_path'</span> into table tbname;</span><br></pre></td></tr></table></figure><p>hdfs上导入数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data inpath 'hafd_file_path' into table tbname;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###配置&lt;/p&gt;
&lt;p&gt;修改hive配置文件 , 我的配置文件位置在 /usr/local/Cellar/hive/2.3.1/libexec/conf&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hbase 基本操作</title>
    <link href="https://lishuiping.github.io/2018/11/30/hbase/"/>
    <id>https://lishuiping.github.io/2018/11/30/hbase/</id>
    <published>2018-11-30T01:44:30.000Z</published>
    <updated>2018-11-30T02:24:03.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-hbase.sh</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><h3 id="进入命令行"><a href="#进入命令行" class="headerlink" title="进入命令行"></a>进入命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>语法：create <table>, {NAME =&gt; <family>, VERSIONS =&gt; <versions>}<br> 例如：创建表t1，有两个family name：f1，f2，且版本数前者为1，后者为2</versions></family></table></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create <span class="string">'t1'</span>,&#123;NAME =&gt; <span class="string">'f1'</span>, VERSIONS =&gt; 1&#125;,&#123;NAME =&gt; <span class="string">'f2'</span>, VERSIONS =&gt; 2&#125;</span><br></pre></td></tr></table></figure><h3 id="查看所有表"><a href="#查看所有表" class="headerlink" title="查看所有表"></a>查看所有表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):006:0&gt; list</span><br><span class="line">TABLE</span><br><span class="line">t1</span><br></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):008:0&gt; desc <span class="string">'t1'</span></span><br><span class="line">Table t1 is ENABLED</span><br><span class="line">t1</span><br><span class="line">COLUMN FAMILIES DESCRIPTION</span><br><span class="line">&#123;NAME =&gt; <span class="string">'f1'</span>, BLOOMFILTER =&gt; <span class="string">'ROW'</span>, VERSIONS =&gt; <span class="string">'3'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'NONE'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, COMPRESSION =&gt; <span class="string">'NONE'</span>, MI</span><br><span class="line">N_VERSIONS =&gt; <span class="string">'0'</span>, BLOCKCACHE =&gt; <span class="string">'true'</span>, BLOCKSIZE =&gt; <span class="string">'65536'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>&#125;</span><br><span class="line">&#123;NAME =&gt; <span class="string">'f2'</span>, BLOOMFILTER =&gt; <span class="string">'ROW'</span>, VERSIONS =&gt; <span class="string">'1'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'NONE'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, COMPRESSION =&gt; <span class="string">'NONE'</span>, MI</span><br><span class="line">N_VERSIONS =&gt; <span class="string">'0'</span>, BLOCKCACHE =&gt; <span class="string">'true'</span>, BLOCKSIZE =&gt; <span class="string">'65536'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>&#125;</span><br><span class="line">2 row(s) <span class="keyword">in</span> 0.0710 seconds</span><br></pre></td></tr></table></figure><h3 id="查询表数据量"><a href="#查询表数据量" class="headerlink" title="查询表数据量"></a>查询表数据量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):007:0&gt; count <span class="string">'t1'</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 0.0350 seconds</span><br><span class="line"></span><br><span class="line">=&gt; 0</span><br></pre></td></tr></table></figure><p>###删除表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disable</span> <span class="string">'t1'</span></span><br><span class="line">or</span><br><span class="line">drop <span class="string">'t1'</span></span><br></pre></td></tr></table></figure><p>###清空表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate <span class="string">'t1'</span></span><br></pre></td></tr></table></figure><h3 id="插入表数据"><a href="#插入表数据" class="headerlink" title="插入表数据"></a>插入表数据</h3><p>语法：put ’<table name="">’,’row1’,’<a href="colfamily:colname" target="_blank" rel="noopener">colfamily:colname</a>’,’<value>’</value></table></p><blockquote><p>hbase(main):002:0&gt; put ‘t1’,’row0001’,’f1:name’,’d’;<br>0 row(s) in 0.0030 seconds</p><p>hbase(main):004:0&gt; count ‘t1’<br>1 row(s) in 0.0260 seconds</p><p>=&gt; 1</p><p>hbase(main):005:0&gt; scan ‘t1’<br>ROW                                            COLUMN+CELL<br>row0001                                       column=f1:name, timestamp=1543543865388, value=d<br>1 row(s) in 0.0190 seconds</p></blockquote><blockquote><p>hbase(main):006:0&gt; put ‘t1’,’row0001’,’f1:age’,’15’<br>0 row(s) in 0.0330 seconds</p></blockquote><blockquote><p>hbase(main):007:0&gt; count ‘t1’<br>1 row(s) in 0.0100 seconds</p><p>=&gt; 1</p><p>hbase(main):008:0&gt; scan ‘t1’<br>ROW                                            COLUMN+CELL<br>row0001                                       column=f1:age, timestamp=1543543961278, value=15<br>row0001                                       column=f1:name, timestamp=1543543865388, value=d<br>1 row(s) in 0.0260 seconds</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hadoop hive hbase 安装说明</title>
    <link href="https://lishuiping.github.io/2018/11/29/hadoop-hive-hbase/"/>
    <id>https://lishuiping.github.io/2018/11/29/hadoop-hive-hbase/</id>
    <published>2018-11-29T03:45:58.000Z</published>
    <updated>2018-12-04T06:26:02.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><p>​        Hadoop是使用Java编写，允许分布在集群，使用简单的编程模型的计算机大型数据集处理的Apache的开源框架。 Hadoop框架应用工程提供跨计算机集群的分布式存储和计算的环境。 Hadoop是专为从单一服务器到上千台机器扩展，每个机器都可以提供本地计算和存储。</p><p>mac 安装方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install hadoop</span><br></pre></td></tr></table></figure><p>可能会出现连接不上的情况，失败后重复执行即可。</p><p>Hadoop 3 端口号的改变</p><table><thead><tr><th>Daemon</th><th>App</th><th>Hadoop2 Port</th><th>Hadoop3 Port</th></tr></thead><tbody><tr><td>NameNode Port</td><td>Hadoop HDFS NameNode</td><td>8020</td><td>9820</td></tr><tr><td></td><td>Hadoop HDFS NameNode HTTP UI</td><td>50070</td><td>9870</td></tr><tr><td></td><td>Hadoop HDFS NameNode HTTPS UI</td><td>50470</td><td>9871</td></tr><tr><td>Secondary NameNode Port</td><td>Secondary NameNode HTTP</td><td>50091</td><td>9869</td></tr><tr><td></td><td>Secondary NameNode HTTP UI</td><td>50090</td><td>9868</td></tr><tr><td>DataNode Port</td><td>Hadoop HDFS DataNode IPC</td><td>50020</td><td>9867</td></tr><tr><td></td><td>Hadoop HDFS DataNode</td><td>50010</td><td>9866</td></tr><tr><td></td><td>Hadoop HDFS DataNode HTTP UI</td><td>50075</td><td>9864</td></tr><tr><td></td><td>Hadoop HDFS DataNode HTTPS UI</td><td>50475</td><td>9865</td></tr></tbody></table><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><p>####hive是什么</p><p>1、Hive 由 Facebook 实现并开源</p><p>2、是基于 Hadoop 的一个数据仓库工具</p><p>3、可以将结构化的数据映射为一张数据库表</p><p>4、并提供 HQL(Hive SQL)查询功能</p><p>5、底层数据是存储在 HDFS 上</p><p>6、Hive的本质是将 SQL 语句转换为 MapReduce 任务运行</p><p>7、使不熟悉 MapReduce 的用户很方便地利用 HQL 处理和计算 HDFS 上的结构化的数据，适用于离线的批量数据计算。</p><p>Hive 依赖于 HDFS 存储数据，Hive 将 HQL 转换成 MapReduce 执行，所以说 Hive 是基于 Hadoop 的一个数据仓库工具，实质就是一款基于 HDFS 的 MapReduce 计算框架，对存储在 HDFS 中的数据进行分析和管理</p><p>直接使用 MapReduce 所面临的问题：</p><p>　　1、人员学习成本太高</p><p>　　2、项目周期要求太短</p><p>　　3、MapReduce实现复杂查询逻辑开发难度太大</p><p>为什么要使用 Hive：</p><p>　　1、更友好的接口：操作接口采用类 SQL 的语法，提供快速开发的能力</p><p>　　2、更低的学习成本：避免了写 MapReduce，减少开发人员的学习成本</p><p>　　3、更好的扩展性：可自由扩展集群规模而无需重启服务，还支持用户自定义函数</p><p>mac 安装方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install hive</span><br></pre></td></tr></table></figure><h3 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h3><p>HBASE是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用HBASE技术可在廉价PC Server上搭建起大规模结构化存储集群。</p><p>HBASE的目标是存储并处理大型的数据，更具体来说是仅需使用普通的硬件配置，就能够处理由成千上万的行和列所组成的大型数据。</p><p>hbase适合大数据的实时查询<br>  是一个数据库系统，面向列的数据库查询，有自己的查询       语句<br>  支持横向扩展，减少成本<br>  由自己的查询方式，不用依赖于MAPREDUCE<br>  索引访问使用（HBASE+HADOOP）</p><p>mac 安装方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install Hbase</span><br></pre></td></tr></table></figure><h4 id="Hive-和-Hbase-的区别"><a href="#Hive-和-Hbase-的区别" class="headerlink" title="Hive 和 Hbase 的区别"></a>Hive 和 Hbase 的区别</h4><ul><li><p>Hbase即 HadoopDatabase 的简称，也就是基于Hadoop数据库，是一种NoSQL数据库，适合大数据的实时查询  是一个数据库系统，面向列的数据库查询，有自己的查询 语句   支持横向扩展，减少成本 由自己的查询方式，不用依赖于MAPREDUCE 索引访问使用（HBASE+HADOOP）主要适用于海量明细数据（十亿、百亿）的随机实时查询，如交易清单、日志明细、轨迹行为等。</p></li><li><p>Hive是Hadoop的数据仓库，严格地讲并非数据库，主要是让开发人员能够通过SQL来计算和处理HDFS上的结构化数据，Hive会将SQL翻译为MapReduce来处理数据 ， hive适合用于网络日志等数据量大的静态数据查询   HIVE是hadoop的数据仓库，依赖于HDFS和mapreduce   类似于SQL操作   把MAPREDUCE的程序作为插件来支持HIVE的数据分析   作用于全表扫描使用（HIVE+HADOOP）   hive的操作是基于整个数据表的、   所以查询起来常常是以小时来计   不支持常规的更新语句，插入，更新，删除</p></li></ul><h3 id="Hive-和-Hbase-的关系"><a href="#Hive-和-Hbase-的关系" class="headerlink" title="Hive 和 Hbase 的关系"></a>Hive 和 Hbase 的关系</h3><p>在大数据架构中，Hive和HBase是协作关系：</p><ul><li><p>通过Hive清洗、处理和计算原始数据；</p></li><li><p>通过ETL工具将数据源抽取到HDFS存储；</p></li><li><p>HIve清洗处理后的结果，如果是面向海量数据随机查询场景的可存入Hbase；</p></li><li><p>数据应用从HBase查询数据。</p></li></ul><p>启动问题</p><p>问题1：22端口未连接、检查本机是否开启sshd 服务器或者是否有启动</p><blockquote><p> connect to host localhost port 22: Connection refused</p></blockquote><p>如果未启动，mac 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/sshd</span><br></pre></td></tr></table></figure><p>问题2：没有设置免密登录</p><blockquote><p>Permission denied (publickey,password,keyboard-interactive).</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#没有公钥请执行这句 sh-keygen -t dsa -P '' -f ~/.ssh/id_rsa.pub</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hadoop&quot;&gt;&lt;a href=&quot;#Hadoop&quot; class=&quot;headerlink&quot; title=&quot;Hadoop&quot;&gt;&lt;/a&gt;Hadoop&lt;/h3&gt;&lt;p&gt;​        Hadoop是使用Java编写，允许分布在集群，使用简单的编程模型的计算机大型数据集处理的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git 分支重命名</title>
    <link href="https://lishuiping.github.io/2018/11/27/git-rename-md/"/>
    <id>https://lishuiping.github.io/2018/11/27/git-rename-md/</id>
    <published>2018-11-27T10:00:45.000Z</published>
    <updated>2018-11-30T06:13:25.370Z</updated>
    
    <content type="html"><![CDATA[<p>今天在项目管理中遇到这么一个场景：</p><p>项目分支有： master 和 develop </p><ul><li><p>master 为可发布版本，每次发布会打上Tag。</p></li><li><p>develop为开发分支，只有一个小组在develop上开发，需求正常迭代，所以基本能满足要求。</p><p>（多项目组多版本同时开发正常会在develop下拉取多个 功能分支：feature-功能1、 feature-功能2 完成后再合并到develop）</p></li></ul><p>由于 develop 进行一部分的需求被暂停，进行另外一部分需求的迭代，但是做过的这部分需求不知道什么时候会重新被启动，所以不能丢弃。</p><p>解决方法：</p><blockquote><p>从master 拉取新分支 develop_new，所有人切换到develop_new，这样会在远端产生 develop_new 和develop 分支。</p></blockquote><p>这不是我想要的，原因：</p><blockquote><p>分支命名混乱，可读性差，无实际意义</p></blockquote><p>使用:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m develop feature-xxx</span><br></pre></td></tr></table></figure><p>将当前develop 分支修改为feature-xxx，并推送到远端，删除远端develop分支，从master 重新拉取新的分支 命名为 develop。 开发人员删除本地 develop，重新checkout 远端 develop 分支。</p><p>这样 feature-xxx 被我们暂时丢一边，等重新启动时，可以在该分支上开发，完成后合并到develop，测试通过最终合并到master ，上线发布。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在项目管理中遇到这么一个场景：&lt;/p&gt;
&lt;p&gt;项目分支有： master 和 develop &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;master 为可发布版本，每次发布会打上Tag。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;develop为开发分支，只有一个小组在develop上
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lishuiping.github.io/2018/11/22/hello-world/"/>
    <id>https://lishuiping.github.io/2018/11/22/hello-world/</id>
    <published>2018-11-22T07:24:13.055Z</published>
    <updated>2018-11-28T09:12:52.688Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/lishuiping/yosoro/master/img/2018-11-28.10.20.51-tu13263_14.jpg" width="100%" height="200"></p><p>做这行一直没有写作的习惯，非常惭愧。</p><p>搭建这个博客，只是将工作，生活中碰到的问题记录，方便日后查看，也是为了培养写作兴趣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lishuiping/yosoro/master/img/2018-11-28.10.20.51-tu13263_14.jpg&quot; width=&quot;100%&quot; height=&quot;200&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
</feed>
